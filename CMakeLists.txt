cmake_minimum_required(VERSION 3.2)
project(cl-tool CXX)

set(OPENCL_INCLUDE_SEARCH_PATHS)
set(OPENCL_LIBRARY_32_SEARCH_PATHS)
set(OPENCL_LIBRARY_64_SEARCH_PATHS)

if (WIN32)
    if (DEFINED ENV{CUDA_LIB_PATH} AND DEFINED ENV{CUDA_INC_PATH})
	set(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{CUDA_INC_PATH})
	set(OPENCL_LIBRARY_32_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS} $ENV{CUDA_LIB_PATH}/../lib $ENV{CUDA_LIB_PATH})
	set(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{CUDA_LIB_PATH}/../lib64 $ENV{CUDA_LIB_PATH})
    else()
	if (DEFINED ENV{CUDA_PATH})
	    set(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{CUDA_PATH}/include)
	    set(OPENCL_LIBRARY_32_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS} $ENV{CUDA_PATH}/lib/Win32)
	    set(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{CUDA_PATH}/lib/x64)
	else()
	    if (DEFINED ENV{INTELOCSDKROOT})
		set(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{INTELOCSDKROOT}/include)
		set(OPENCL_LIBRARY_32_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS} $ENV{INTELOCSDKROOT}/lib/x86)
		set(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{INTELOCSDKROOT}/lib/x64)
	    else()
		if (DEFINED ENV{AMDAPPSDKROOT})
		    set(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} $ENV{AMDAPPSDKROOT}/include)
		    set(OPENCL_LIBRARY_32_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS} $ENV{AMDAPPSDKROOT}/lib/x86)
		    set(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} $ENV{AMDAPPSDKROOT}/lib/x86_64)
		# else()
		    # set(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} "$ENV{PROGRAMFILES}/NVIDIA Corporation/NVIDA CUDA SDK/include" C:/Intel/OpenCL/sdk/include)
		    # set(OPENCL_INCLUDE_SEARCH_PATHS ${OPENCL_INCLUDE_SEARCH_PATHS} "$ENV{PROGRAMFILES(x86)}/AMD APP SDK/*/include" "$ENV{PROGRAMFILES}/AMD APP SDK/*/include" "$ENV{USERPROFILE}/AMD APP SDK/*/include")
		    # set(OPENCL_LIBRARY_32_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS} "$ENV{PROGRAMFILES}/NVIDIA Corporation/NVIDIA CUDA SDK/lib/Win32" "$ENV{PROGRAMFILES}/NVIDIA Corporation/NVIDIA CUDA SDK/lib" C:/Intel/OpenCL/sdk/lib/x86)
		    # set(OPENCL_LIBRARY_64_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS} "$ENV{PROGRAMFILES}/NVIDIA Corporation/NVIDIA CUDA SDK/lib/x64" "$ENV{PROGRAMFILES}/NVIDIA Corporation/NVIDIA CUDA SDK/lib64" C:/Intel/OpenCL/sdk/lib/x64)
		endif()
	    endif()
	endif()
    endif()
else()
    if (CYGWIN)
	set(CMAKE_FIND_LIBRARY_SUFFIXES .lib)
	set(OCL_LIB_SUFFIX .lib)
    endif()
endif()

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS})
    set(FIND_LIBRARY_USE_LIB64_PATHS ON)
else()
    set(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS})
endif()

if (APPLE)
    find_path(OPENCL_INCLUDE_DIRS OpenCL/cl.h PATHS ENV OpencCL_INCPATH ${OPENCL_INCLUDE_SEARCH_PATHS})
    find_path(OPENCL2_HPP_INCLUDE_DIRS OpenCL/cl2.hpp PATHS ENV OpencCL_INCPATH ${OPENCL_INCLUDE_SEARCH_PATHS})
else()
    find_path(OPENCL_INCLUDE_DIRS CL/cl.h PATHS ENV OpencCL_INCPATH ${OPENCL_INCLUDE_SEARCH_PATHS})
    find_path(OPENCL2_HPP_INCLUDE_DIRS CL/cl2.hpp PATHS ENV OpencCL_INCPATH ${OPENCL_INCLUDE_SEARCH_PATHS})
endif()

find_library(OPENCL_LIBRARIES NAMES OpenCL DOC "OpenCL library" PATHS ENV OpenCL_LIBPATH ${OPENCL_LIBRARY_SEARCH_PATHS})
find_package(Threads)

set(CL_INFO_SOURCES cl-matrix-mult.hh cl-matrix-mult.cc cl-platform-info.hh cl-platform-info.cc cl-tool.cc)
add_executable(cl-tool ${CL_INFO_SOURCES})
target_compile_features(cl-tool PUBLIC cxx_std_14)
target_compile_definitions(cl-tool PUBLIC CL_HPP_TARGET_OPENCL_VERSION=200 CL_HPP_MINIMUM_OPENCL_VERSION=110 CL_HPP_CL_1_2_DEFAULT_BUILD CL_HPP_ENABLE_EXCEPTIONS)
target_compile_definitions(cl-tool PUBLIC __CL_ENABLE_EXCEPTIONS CL_VERSION_1_2)
target_include_directories(cl-tool PUBLIC ${OPENCL_INCLUDE_DIRS} ${OPENCL2_HPP_INCLUDE_DIRS})
target_compile_options(cl-tool PRIVATE -Wno-ignored-attributes)
target_link_libraries(cl-tool ${OPENCL_LIBRARIES} Threads::Threads)
