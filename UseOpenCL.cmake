set(OPENCL_INCLUDE_SEARCH_PATHS)
set(OPENCL_LIBRARY_32_SEARCH_PATHS)
set(OPENCL_LIBRARY_64_SEARCH_PATHS)

if (WIN32)
    function(find_opencl_windows_sdk PROVIDER)
	if (${PROVIDER} STREQUAL "NVIDIA" AND DEFINED ENV{CUDA_PATH})
	    message(STATUS "Found environment variables for ${PROVIDER} OpenCL SDK")
	    set(OPENCL_INCLUDE_SEARCH_PATHS "$ENV{CUDA_PATH}/include" PARENT_SCOPE)
	    set(OPENCL_LIBRARY_32_SEARCH_PATHS "$ENV{CUDA_PATH}/lib/Win32" PARENT_SCOPE)
	    set(OPENCL_LIBRARY_64_SEARCH_PATHS "$ENV{CUDA_PATH}/lib/x64" PARENT_SCOPE)
	else()
	    if (${PROVIDER} STREQUAL "NVIDIA" AND DEFINED ENV{CUDA_LIB_PATH} AND DEFINED ENV{CUDA_INC_PATH})
		message(STATUS "Found environment variables for ${PROVIDER} OpenCL SDK")
		set(OPENCL_INCLUDE_SEARCH_PATHS "$ENV{CUDA_INC_PATH}" PARENT_SCOPE)
		set(OPENCL_LIBRARY_32_SEARCH_PATHS "$ENV{CUDA_LIB_PATH}/../lib" PARENT_SCOPE)
		set(OPENCL_LIBRARY_64_SEARCH_PATHS "$ENV{CUDA_LIB_PATH}/../lib64" PARENT_SCOPE)
	    else()
		if (${PROVIDER} STREQUAL "Intel" AND DEFINED ENV{INTELOCLSDKROOT})
		    message(STATUS "Found environment variables for ${PROVIDER} OpenCL SDK")
		    set(OPENCL_INCLUDE_SEARCH_PATHS "$ENV{INTELOCLSDKROOT}/include" PARENT_SCOPE)
		    set(OPENCL_LIBRARY_32_SEARCH_PATHS "$ENV{INTELOCLSDKROOT}/lib/x86" PARENT_SCOPE)
		    set(OPENCL_LIBRARY_64_SEARCH_PATHS "$ENV{INTELOCLSDKROOT}/lib/x64" PARENT_SCOPE)
		else()
		    if (${PROVIDER} STREQUAL "AMD" AND DEFINED ENV{AMDAPPSDKROOT})
			message(STATUS "Found environment variables for ${PROVIDER} OpenCL SDK")
			set(OPENCL_INCLUDE_SEARCH_PATHS "$ENV{AMDAPPSDKROOT}/include" PARENT_SCOPE)
			set(OPENCL_LIBRARY_32_SEARCH_PATHS "$ENV{AMDAPPSDKROOT}/lib/x86" PARENT_SCOPE)
			set(OPENCL_LIBRARY_64_SEARCH_PATHS "$ENV{AMDAPPSDKROOT}/lib/x86_64" PARENT_SCOPE)
		    endif()
		endif()
	    endif()
	endif()
    endfunction()

    if (DEFINED CL_SDK)
	set(CL_SDK_PROVIDER_LIST ${CL_SDK})
    else()
	set(CL_SDK_PROVIDER_LIST AMD Intel NVIDIA) # NVIDIA only provdes headers for OpenCL up to 1.2
    endif()

    foreach(PROVIDER ${CL_SDK_PROVIDER_LIST})
	find_opencl_windows_sdk(${PROVIDER})
	if (DEFINED OPENCL_INCLUDE_SEARCH_PATHS)
	    break()
	endif()
    endforeach()
else()
    if (CYGWIN)
	set(CMAKE_FIND_LIBRARY_SUFFIXES .lib)
	set(OCL_LIB_SUFFIX .lib)
    endif()
endif()

if (APPLE)
    find_path(OPENCL2_HPP_INCLUDE_DIRS NAMES OpenCL/cl2.hpp HINTS ENV OpencCL_INCPATH HINTS ${OPENCL_INCLUDE_SEARCH_PATHS})
    find_path(OPENCL_INCLUDE_DIRS NAMES OpenCL/cl.h HINTS ENV OpencCL_INCPATH HINTS ${OPENCL_INCLUDE_SEARCH_PATHS})
else()
    if (OPENCL_INCLUDE_SEARCH_PATHS)
	find_path(OPENCL2_HPP_INCLUDE_DIRS NAMES CL/cl2.hpp HINTS ENV OpencCL_INCPATH HINTS ${OPENCL_INCLUDE_SEARCH_PATHS} NO_DEFAULT_PATH)
	find_path(OPENCL_INCLUDE_DIRS NAMES CL/cl.h HINTS ENV OpencCL_INCPATH HINTS ${OPENCL_INCLUDE_SEARCH_PATHS} NO_DEFAULT_PATH)
    else()
	find_path(OPENCL2_HPP_INCLUDE_DIRS NAMES CL/cl2.hpp HINTS ENV OpencCL_INCPATH)
	find_path(OPENCL_INCLUDE_DIRS NAMES CL/cl.h HINTS ENV OpencCL_INCPATH)
    endif()
endif()

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_64_SEARCH_PATHS})
    set(FIND_LIBRARY_USE_LIB64_PATHS ON)
else()
    set(OPENCL_LIBRARY_SEARCH_PATHS ${OPENCL_LIBRARY_32_SEARCH_PATHS})
endif()

if (OPENCL_LIBRARY_SEARCH_PATHS)
    find_library(OPENCL_LIBRARIES NAMES OpenCL DOC "OpenCL library" HINTS ENV OpenCL_LIBPATH HINTS ${OPENCL_LIBRARY_SEARCH_PATHS} NO_DEFAULT_PATH)
else()
    find_library(OPENCL_LIBRARIES NAMES OpenCL DOC "OpenCL library" HINTS ENV OpenCL_LIBPATH)
endif()

